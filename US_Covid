{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data about confirmed cases in the US:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UID</th>\n",
       "      <th>iso2</th>\n",
       "      <th>iso3</th>\n",
       "      <th>code3</th>\n",
       "      <th>FIPS</th>\n",
       "      <th>Admin2</th>\n",
       "      <th>Province_State</th>\n",
       "      <th>Country_Region</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Long_</th>\n",
       "      <th>...</th>\n",
       "      <th>9/8/21</th>\n",
       "      <th>9/9/21</th>\n",
       "      <th>9/10/21</th>\n",
       "      <th>9/11/21</th>\n",
       "      <th>9/12/21</th>\n",
       "      <th>9/13/21</th>\n",
       "      <th>9/14/21</th>\n",
       "      <th>9/15/21</th>\n",
       "      <th>9/16/21</th>\n",
       "      <th>9/17/21</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>84001001</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>32.539527</td>\n",
       "      <td>-86.644082</td>\n",
       "      <td>...</td>\n",
       "      <td>9108</td>\n",
       "      <td>9145</td>\n",
       "      <td>9207</td>\n",
       "      <td>9246</td>\n",
       "      <td>9287</td>\n",
       "      <td>9317</td>\n",
       "      <td>9351</td>\n",
       "      <td>9371</td>\n",
       "      <td>9416</td>\n",
       "      <td>9439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>84001003</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>30.727750</td>\n",
       "      <td>-87.722071</td>\n",
       "      <td>...</td>\n",
       "      <td>34393</td>\n",
       "      <td>34536</td>\n",
       "      <td>34726</td>\n",
       "      <td>34872</td>\n",
       "      <td>34950</td>\n",
       "      <td>35039</td>\n",
       "      <td>35221</td>\n",
       "      <td>35347</td>\n",
       "      <td>35517</td>\n",
       "      <td>35619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84001005</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>Barbour</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>31.868263</td>\n",
       "      <td>-85.387129</td>\n",
       "      <td>...</td>\n",
       "      <td>3225</td>\n",
       "      <td>3243</td>\n",
       "      <td>3260</td>\n",
       "      <td>3282</td>\n",
       "      <td>3295</td>\n",
       "      <td>3315</td>\n",
       "      <td>3329</td>\n",
       "      <td>3346</td>\n",
       "      <td>3355</td>\n",
       "      <td>3370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84001007</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1007.0</td>\n",
       "      <td>Bibb</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>32.996421</td>\n",
       "      <td>-87.125115</td>\n",
       "      <td>...</td>\n",
       "      <td>3694</td>\n",
       "      <td>3727</td>\n",
       "      <td>3752</td>\n",
       "      <td>3778</td>\n",
       "      <td>3795</td>\n",
       "      <td>3821</td>\n",
       "      <td>3859</td>\n",
       "      <td>3889</td>\n",
       "      <td>3929</td>\n",
       "      <td>3947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84001009</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1009.0</td>\n",
       "      <td>Blount</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>33.982109</td>\n",
       "      <td>-86.567906</td>\n",
       "      <td>...</td>\n",
       "      <td>8998</td>\n",
       "      <td>9048</td>\n",
       "      <td>9095</td>\n",
       "      <td>9161</td>\n",
       "      <td>9176</td>\n",
       "      <td>9199</td>\n",
       "      <td>9246</td>\n",
       "      <td>9272</td>\n",
       "      <td>9329</td>\n",
       "      <td>9357</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 616 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        UID iso2 iso3  code3    FIPS   Admin2 Province_State Country_Region  \\\n",
       "0  84001001   US  USA    840  1001.0  Autauga        Alabama             US   \n",
       "1  84001003   US  USA    840  1003.0  Baldwin        Alabama             US   \n",
       "2  84001005   US  USA    840  1005.0  Barbour        Alabama             US   \n",
       "3  84001007   US  USA    840  1007.0     Bibb        Alabama             US   \n",
       "4  84001009   US  USA    840  1009.0   Blount        Alabama             US   \n",
       "\n",
       "         Lat      Long_  ... 9/8/21  9/9/21  9/10/21  9/11/21  9/12/21  \\\n",
       "0  32.539527 -86.644082  ...   9108    9145     9207     9246     9287   \n",
       "1  30.727750 -87.722071  ...  34393   34536    34726    34872    34950   \n",
       "2  31.868263 -85.387129  ...   3225    3243     3260     3282     3295   \n",
       "3  32.996421 -87.125115  ...   3694    3727     3752     3778     3795   \n",
       "4  33.982109 -86.567906  ...   8998    9048     9095     9161     9176   \n",
       "\n",
       "   9/13/21  9/14/21  9/15/21  9/16/21  9/17/21  \n",
       "0     9317     9351     9371     9416     9439  \n",
       "1    35039    35221    35347    35517    35619  \n",
       "2     3315     3329     3346     3355     3370  \n",
       "3     3821     3859     3889     3929     3947  \n",
       "4     9199     9246     9272     9329     9357  \n",
       "\n",
       "[5 rows x 616 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data about deaths cases in the US:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UID</th>\n",
       "      <th>iso2</th>\n",
       "      <th>iso3</th>\n",
       "      <th>code3</th>\n",
       "      <th>FIPS</th>\n",
       "      <th>Admin2</th>\n",
       "      <th>Province_State</th>\n",
       "      <th>Country_Region</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Long_</th>\n",
       "      <th>...</th>\n",
       "      <th>9/8/21</th>\n",
       "      <th>9/9/21</th>\n",
       "      <th>9/10/21</th>\n",
       "      <th>9/11/21</th>\n",
       "      <th>9/12/21</th>\n",
       "      <th>9/13/21</th>\n",
       "      <th>9/14/21</th>\n",
       "      <th>9/15/21</th>\n",
       "      <th>9/16/21</th>\n",
       "      <th>9/17/21</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>84001001</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>32.539527</td>\n",
       "      <td>-86.644082</td>\n",
       "      <td>...</td>\n",
       "      <td>119</td>\n",
       "      <td>119</td>\n",
       "      <td>119</td>\n",
       "      <td>119</td>\n",
       "      <td>119</td>\n",
       "      <td>119</td>\n",
       "      <td>119</td>\n",
       "      <td>119</td>\n",
       "      <td>120</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>84001003</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>30.727750</td>\n",
       "      <td>-87.722071</td>\n",
       "      <td>...</td>\n",
       "      <td>400</td>\n",
       "      <td>402</td>\n",
       "      <td>411</td>\n",
       "      <td>412</td>\n",
       "      <td>412</td>\n",
       "      <td>412</td>\n",
       "      <td>417</td>\n",
       "      <td>420</td>\n",
       "      <td>431</td>\n",
       "      <td>445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84001005</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>Barbour</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>31.868263</td>\n",
       "      <td>-85.387129</td>\n",
       "      <td>...</td>\n",
       "      <td>65</td>\n",
       "      <td>65</td>\n",
       "      <td>67</td>\n",
       "      <td>67</td>\n",
       "      <td>67</td>\n",
       "      <td>67</td>\n",
       "      <td>67</td>\n",
       "      <td>67</td>\n",
       "      <td>67</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84001007</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1007.0</td>\n",
       "      <td>Bibb</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>32.996421</td>\n",
       "      <td>-87.125115</td>\n",
       "      <td>...</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>75</td>\n",
       "      <td>75</td>\n",
       "      <td>75</td>\n",
       "      <td>75</td>\n",
       "      <td>75</td>\n",
       "      <td>76</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84001009</td>\n",
       "      <td>US</td>\n",
       "      <td>USA</td>\n",
       "      <td>840</td>\n",
       "      <td>1009.0</td>\n",
       "      <td>Blount</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>US</td>\n",
       "      <td>33.982109</td>\n",
       "      <td>-86.567906</td>\n",
       "      <td>...</td>\n",
       "      <td>147</td>\n",
       "      <td>147</td>\n",
       "      <td>146</td>\n",
       "      <td>146</td>\n",
       "      <td>146</td>\n",
       "      <td>146</td>\n",
       "      <td>146</td>\n",
       "      <td>146</td>\n",
       "      <td>149</td>\n",
       "      <td>149</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 617 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        UID iso2 iso3  code3    FIPS   Admin2 Province_State Country_Region  \\\n",
       "0  84001001   US  USA    840  1001.0  Autauga        Alabama             US   \n",
       "1  84001003   US  USA    840  1003.0  Baldwin        Alabama             US   \n",
       "2  84001005   US  USA    840  1005.0  Barbour        Alabama             US   \n",
       "3  84001007   US  USA    840  1007.0     Bibb        Alabama             US   \n",
       "4  84001009   US  USA    840  1009.0   Blount        Alabama             US   \n",
       "\n",
       "         Lat      Long_  ... 9/8/21  9/9/21  9/10/21  9/11/21  9/12/21  \\\n",
       "0  32.539527 -86.644082  ...    119     119      119      119      119   \n",
       "1  30.727750 -87.722071  ...    400     402      411      412      412   \n",
       "2  31.868263 -85.387129  ...     65      65       67       67       67   \n",
       "3  32.996421 -87.125115  ...     74      74       74       75       75   \n",
       "4  33.982109 -86.567906  ...    147     147      146      146      146   \n",
       "\n",
       "   9/13/21  9/14/21  9/15/21  9/16/21  9/17/21  \n",
       "0      119      119      119      120      124  \n",
       "1      412      417      420      431      445  \n",
       "2       67       67       67       67       67  \n",
       "3       75       75       75       76       76  \n",
       "4      146      146      146      149      149  \n",
       "\n",
       "[5 rows x 617 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape (Rows, columns) of confirmed Data Frame: (3342, 616)\n",
      "Shape (Rows, columns) of deaths Data Frame: (3342, 617)\n",
      "604 days since the outbreak of covid 19 (1/22/20)\n",
      "1 Alabama\n",
      "2 Alaska\n",
      "3 American Samoa\n",
      "4 Arizona\n",
      "5 Arkansas\n",
      "6 California\n",
      "7 Colorado\n",
      "8 Connecticut\n",
      "9 Delaware\n",
      "10 Diamond Princess\n",
      "11 District of Columbia\n",
      "12 Florida\n",
      "13 Georgia\n",
      "14 Grand Princess\n",
      "15 Guam\n",
      "16 Hawaii\n",
      "17 Idaho\n",
      "18 Illinois\n",
      "19 Indiana\n",
      "20 Iowa\n",
      "21 Kansas\n",
      "22 Kentucky\n",
      "23 Louisiana\n",
      "24 Maine\n",
      "25 Maryland\n",
      "26 Massachusetts\n",
      "27 Michigan\n",
      "28 Minnesota\n",
      "29 Mississippi\n",
      "30 Missouri\n",
      "31 Montana\n",
      "32 Nebraska\n",
      "33 Nevada\n",
      "34 New Hampshire\n",
      "35 New Jersey\n",
      "36 New Mexico\n",
      "37 New York\n",
      "38 North Carolina\n",
      "39 North Dakota\n",
      "40 Northern Mariana Islands\n",
      "41 Ohio\n",
      "42 Oklahoma\n",
      "43 Oregon\n",
      "44 Pennsylvania\n",
      "45 Puerto Rico\n",
      "46 Rhode Island\n",
      "47 South Carolina\n",
      "48 South Dakota\n",
      "49 Tennessee\n",
      "50 Texas\n",
      "51 Utah\n",
      "52 Vermont\n",
      "53 Virgin Islands\n",
      "54 Virginia\n",
      "55 Washington\n",
      "56 West Virginia\n",
      "57 Wisconsin\n",
      "58 Wyoming\n"
     ]
    }
   ],
   "source": [
    "# import Pandas module and alias as pd\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "# In[2]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "read csv data from Github link across the time span from 1/22/20 to current: \n",
    "https://github.com/CSSEGISandData/COVID-19\n",
    "\"\"\"\n",
    "# read the US dataset: 'confirmed_US.csv', 'deaths_US.csv'\n",
    "data = ['confirmed', 'deaths']\n",
    "url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_'\n",
    "suffix = '_US.csv'\n",
    "\n",
    "# create a list combining the files above: dataList_us\n",
    "dataList_us = []\n",
    "\n",
    "# use for loop to complete the links individually\n",
    "# put the complete links into the list of \"dataList_us\"\n",
    "for i in range(len(data)):\n",
    "    complete_url = url + data[i] + suffix\n",
    "    df = pd.read_csv(complete_url)  \n",
    "    print(\"Data about %s cases in the US:\" %data[i])\n",
    "    #have a glance at each Data Frame and put them into dataList_us\n",
    "    display(df.head(5))\n",
    "    # add the Data Frame into \"dataList_us\"\n",
    "    dataList_us.append(df)\n",
    "\n",
    "\n",
    "# In[3]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "print the shapes of Data Frames(row x column) with string formatting\n",
    "\"\"\"\n",
    "# us_df_list[0]: US confirmed data\n",
    "# us_df_list[1]: US deaths data\n",
    "print(\"Shape (Rows, columns) of confirmed Data Frame: %s\" %(dataList_us[0].shape,)) #.shape -> returns a tuple\n",
    "print(\"Shape (Rows, columns) of deaths Data Frame: %s\" %(dataList_us[1].shape,))\n",
    "\n",
    "\n",
    "# In[4]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "print the total days of observation about the US confirmed/ deaths data\n",
    "\"\"\"\n",
    "# to see what column index of \"1/22/20\" \n",
    "i = dataList_us[0].columns.get_loc(\"1/22/20\") # output: 11 \n",
    "# the date range from 1/22/20 to current: days\n",
    "days_confirmed = dataList_us[0].shape[1] - (i+1)\n",
    "print(\"%s days since the outbreak of covid 19 (1/22/20)\" %str(days_confirmed)) # confirmed data's date range = US deaths data's date range\n",
    "\n",
    "\n",
    "# In[5]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "show the name of states and the number of states with enumerate()\n",
    "\"\"\"\n",
    "for index, state in enumerate(df.Province_State.unique()):\n",
    "    print(index+1,state)\n",
    "\n",
    "\n",
    "# In[6]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "Data summarization: sum all the admins inside Data state into a single record\n",
    "\"\"\"\n",
    "# function to sum all the admins inside the same state into a single record\n",
    "def sum_state(df, state):\n",
    "    \n",
    "    # query the rows matching the appointed state from the Data Frame\n",
    "    df_state = df[df[\"Province_State\"]==state]\n",
    "    \n",
    "    # create a new row to record the sum for each column: total\n",
    "    total = df_state.sum(axis=0)\n",
    "    \n",
    "    # recover the values/contents of columns which were unnecessary to be calculated the sum \n",
    "    # the \"Province_State\" column will be marked as state name + \"-> Sum\" instead of solely state for recognizing later on .\n",
    "    total.loc['UID'] = \"NaN\"\n",
    "    total.loc['Admin2'] = \"NaN\"\n",
    "    total.loc['FIPS'] = \"NaN\"\n",
    "    total.loc['iso2'] = \"US\"\n",
    "    total.loc['iso3'] = \"USA\"\n",
    "    total.loc['code3'] = 840\n",
    "    total.loc['Country_Region'] = \"US\"\n",
    "    total.loc['Province_State'] = state + \"-> sum\"\n",
    "    total.loc['Lat'] = df_state['Lat'].values[0]\n",
    "    total.loc['Long_'] = df_state['Long_'].values[0]\n",
    "    \n",
    "    \n",
    "    # append the new row to the original Data Frame and convert Series(\"sum_row\") to Data Frame\n",
    "    df = pd.concat([df, total.to_frame().T], ignore_index=True)\n",
    "    # display the row of (df[df[\"Province_State\"].str.contains(state + \"-> sum\")])\n",
    "    df=df[df['Province_State'] != state]\n",
    "    df.loc[df.Province_State == state + \"-> sum\", 'Province_State'] = state\n",
    "    \n",
    "    return df\n",
    "\n",
    "# summarize the data of US confirmed cases and deaths cases by using \"sum_admins_in_state\" function above\n",
    "for i in range(2):\n",
    "    df = dataList_us[i] \n",
    "    for state in df.Province_State.unique():\n",
    "        df = sum_state(df, state)\n",
    "    dataList_us[i]=df\n",
    "\n",
    "# have a look at the results such as the last 5 rows of the data\n",
    "for i in range(len(data)):\n",
    "    print(\"Data summarization about %s cases:\" %data[i])\n",
    "    display(dataList_us[i].tail(5))\n",
    "\n",
    "\n",
    "# In[7]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "Data simplification: delete the 6 unnecessary columns (UID\tiso2\tiso3\tcode3\tFIPS\tAdmin2)\n",
    "\"\"\"\n",
    "# delete them from comfirmed dataset\n",
    "us_confirmed = dataList_us[0]\n",
    "us_confirmed = us_confirmed.drop(us_confirmed.iloc[:,:6], axis =1) # axis=1: represents columns\n",
    "us_confirmed = us_confirmed.reset_index(drop=True) # recover the index of the Data Frame; drop=True:avoid the old index being added as a column\n",
    "\n",
    "# delete them from deaths dataset\n",
    "us_deaths = dataList_us[1]\n",
    "us_deaths = us_deaths.drop(us_deaths.iloc[:,:6], axis =1)\n",
    "us_deaths = us_deaths.reset_index(drop=True)\n",
    "\n",
    "\n",
    "# have a look at the results such as the last 5 rows of the data\n",
    "for i in range(len(data)):\n",
    "    print(\"Data simplification about %s cases:\" %data[i])\n",
    "    if i==0:\n",
    "        display(us_confirmed.tail(5))\n",
    "    if i==1:\n",
    "        display(us_deaths.tail(5))\n",
    "\n",
    "\n",
    "# In[8]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "Data organization: \n",
    "1. calculate the total cases of each state and date\n",
    "2. create the death rate(%) column to \"us_deaths\" DataFrame and calculate it with map() and lambda\n",
    "3. show the ratio of each state's death cases with pie chart\n",
    "4. show the total confirmed/deaths cases per state with the higher order function - zip() \n",
    "5. revise the names of columns with higher order function such as map() and lambda\n",
    "6. make a transpose of matrix after simplifying the data\n",
    "7. calculate the daily addition of confirmed cases and plot it (add an average line in the plot)\n",
    "8. data visualization - time series\n",
    "9. Simple linear regression for predictions: y = mx+c (y: ttl confirmed cases; x: state's confirmed cases)  with inner function\n",
    "\"\"\"\n",
    "\n",
    "\"\"\"\n",
    "1. calculate the total cases of each state and date\n",
    "\"\"\"\n",
    "# create a new row to summarize the US daily confirmed/ deaths cases everyday\n",
    "us_confirmed.loc['Date Total']= us_confirmed.iloc[:,5:].sum()\n",
    "us_deaths.loc['Total']= us_deaths.iloc[:,5:].sum() # including the summarization of population\n",
    "\n",
    "# convert a float into an integer in a us_confirmed DataFrame\n",
    "us_confirmed.iloc[:,5:] = us_confirmed.iloc[:,5:].astype(int)\n",
    "# convert a float into an integer in a us_deaths DataFrame\n",
    "us_deaths.iloc[:,5:] = us_deaths.iloc[:,5:].astype(int)\n",
    "\n",
    "# have a look at the results such as the last 2 rows of the data\n",
    "for i in range(len(data)):\n",
    "    print(\"%s cases:\" %data[i])\n",
    "    if i==0:\n",
    "        display(us_confirmed.tail(2))\n",
    "    if i==1:\n",
    "        display(us_deaths.tail(2))\n",
    "\n",
    "# display the US confirmed dataset after the summarization\n",
    "us_confirmed = us_confirmed.fillna(\"Summary\") # fillna(\"Summary\") -> replace NaN value to \"Summary\"\n",
    "us_deaths = us_deaths.fillna(\"Summary\") # fillna(\"Summary\") -> replace NaN value to \"Summary\"\n",
    "\n",
    "# have a look at the results such as the last 2 rows of the data\n",
    "for i in range(len(data)):\n",
    "    print(\"Data organization (after summarization) about %s cases:\" %data[i])\n",
    "    if i==0:\n",
    "        display(us_confirmed.tail(2))\n",
    "    if i==1:\n",
    "        display(us_deaths.tail(2))\n",
    "\n",
    "\n",
    "# In[9]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "2. create the death rate(%) column and calculate it with map() and lambda\n",
    "\"\"\"\n",
    "# convert the column of us_deaths[\"Population\"] to a list first\n",
    "population_list = us_deaths[\"Population\"].values.tolist()\n",
    "\n",
    "# get the last column from \"us_deaths\" data which is the latest statistical date\n",
    "deathNum_list = us_deaths[us_deaths.columns[-1:]].values.tolist() # 2D array\n",
    "\n",
    "# flatten the 2D array to 1D array\n",
    "from itertools import chain \n",
    "deathNum_list = list(chain.from_iterable(deathNum_list)) \n",
    "\n",
    "# calculate each state's death rate by using map() and lambda\n",
    "m = map(lambda x,y: x/y*100 if y>0 else 0, deathNum_list,population_list[:])   \n",
    "\n",
    "# round the death rate to 2 decimals by using map() and lambda again\n",
    "rate_list = list(map(lambda x: round(x, ndigits=2) if x >0 else 0, list(m))) # list() -> convert the map objecct to a list\n",
    "\n",
    "# create \"Death Rate(%)\" column in \"us_deaths\" DataFrame\n",
    "us_deaths[\"Death Rate(%)\"] = rate_list\n",
    "\n",
    "# have a look at the results such as the last 3 rows of the data\n",
    "us_deaths.tail(3) # the average death rate is on the bottom right corner \n",
    "\n",
    "\n",
    "# In[10]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "3. show the ratio of each state's death cases with pie chart\n",
    "\"\"\"\n",
    "# import the module of plot\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "labels = us_deaths[\"Province_State\"][:-1] # labels: the states of US\n",
    "sizes = us_deaths.iloc[:-1,-2:-1].iloc[:, 0].tolist() # sizes: the list of ystd's death cases of each state\n",
    "plt.figure(figsize=[30, 30]) # set the size of plot \n",
    "\n",
    "explode = [] # explode: the list of the different shapes in the plot\n",
    "for i in range(58):\n",
    "    if i % 3 == 0:\n",
    "        explode.append(0.15)\n",
    "    elif i % 2 ==0:\n",
    "         explode.append(0.07)\n",
    "    else:\n",
    "        explode.append(0)\n",
    "\n",
    "plt.pie(sizes, labels=labels,autopct='%1.1f%%', explode=explode)\n",
    "plt.title('Death cases of each state', fontsize=30, y=1.05)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# In[11]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "4-1. Show the total confirmed cases per state with the higher order function with zip() \n",
    "\"\"\"\n",
    "# the column of us_confirmed[\"Province_State\"]: zip_1\n",
    "zip_1 = us_confirmed[\"Province_State\"]\n",
    "\n",
    "# the column of us_confirmed[\"State Total\"]: zip_2\n",
    "zip_2 = us_confirmed.iloc[:,-1] # list type: int\n",
    "\n",
    "# Zip through zip_1 and zip_2 and pair them together\n",
    "zipped = zip(zip_1,zip_2)\n",
    "\n",
    "print(\"Total confirmed cases per state in ascending order:\")\n",
    "# sort the zipped list\n",
    "sorted(zipped, key = lambda t: t[1])\n",
    "\n",
    "\n",
    "# In[12]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "4-2. Show the total deaths cases per state with the higher order function with zip() \n",
    "\"\"\"\n",
    "# the column of us_deaths[\"Province_State\"]: zip_1\n",
    "zip_1 = us_deaths[\"Province_State\"]\n",
    "\n",
    "# the column of us_deaths[\"State Total\"]: zip_2\n",
    "zip_2 = us_deaths.iloc[:,-2] # list type: float \n",
    "\n",
    "# the column of us_deaths[\"Death Rate(%)\"]: zip_3\n",
    "zip_3 = us_deaths.iloc[:,-1]\n",
    "\n",
    "# Zip through zip_1 and zip_2 and pair them together\n",
    "zipped = zip(zip_1,zip_2,zip_3)\n",
    "\n",
    "print(\"Total deaths cases and rate(%) per state in ascending order of death rate:\")\n",
    "# sort the zipped list\n",
    "sorted(zipped, key = lambda t: t[2])\n",
    "\n",
    "\n",
    "# In[13]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "5-1. revise the names of columns with higher order function such as map() and lambda to add \"_confirmed\" after every provice states\n",
    "\"\"\"\n",
    "# make a list of province states from us_confirmed: provinceList\n",
    "provinceList = list(us_confirmed[\"Province_State\"]) \n",
    "\n",
    "# use the higher order function(map()) and lambda \n",
    "# to append \"_Confirmed\" to each element in provinceList: map_confirmed\n",
    "map_confirmed = map(lambda x: (str(x) + \"_confirmed\"), provinceList)\n",
    "\n",
    "# to make map_confirmed a list\n",
    "state_confirmed = list(map_confirmed)\n",
    "state_confirmed\n",
    "\n",
    "\n",
    "# In[14]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "5-2. revise the names of columns with higher order function such as map() and lambda to add \"_deaths\" after every province states\n",
    "\"\"\"\n",
    "# make a list of province states from us_confirmed: provinceList\n",
    "provinceList = list(us_deaths[\"Province_State\"]) \n",
    "\n",
    "# use the higher order function(map()) and lambda \n",
    "# to append \"_Confirmed\" to each element in provinceList: map_confirmed\n",
    "map_deaths = map(lambda x: (str(x) + \"_deaths\"), provinceList)\n",
    "\n",
    "# to make map_confirmed a list\n",
    "state_deaths = list(map_deaths)\n",
    "state_deaths\n",
    "\n",
    "\n",
    "# In[15]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "6-1. make a transpose of matrix after simplifying the data of confirmed cases\n",
    "\"\"\"\n",
    "# remove the first 5 unnecessary columns of us_confirmed which are Province_State\tCountry_Region\tLat\tLong_\tCombined_Key: data_confirmed\n",
    "data_confirmed = us_confirmed.iloc[:,5:]\n",
    "\n",
    "# name data_confirmed's index after state_confirmed's elements\n",
    "data_confirmed.index = pd.Index(state_confirmed, name='Date(M/D/Y)')\n",
    "\n",
    "# make a transpose of data_confirmed to change the positions of date and province_confirmed\n",
    "data_confirmed = data_confirmed.T\n",
    "\n",
    "# have a look at the last 5 rows of data_confirmed\n",
    "data_confirmed.head(10)\n",
    "\n",
    "\n",
    "# In[16]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "6-2. make a transpose of matrix after simplifying the data of deaths cases\n",
    "\"\"\"\n",
    "# remove the first 5 unnecessary columns of us_confirmed which are Province_State\tCountry_Region\tLat\tLong_\tCombined_Key: data_deaths\n",
    "data_deaths = us_deaths.iloc[:,5:]\n",
    "\n",
    "# name data_deaths's index after state_confirmed's elements\n",
    "data_deaths.index = pd.Index(state_deaths, name='Date(M/D/Y)')\n",
    "\n",
    "# make a transpose of data_deaths to change the positions of date and province_confirmed\n",
    "data_deaths = data_deaths.T\n",
    "\n",
    "# have a look at the first 5 rows of df1\n",
    "data_deaths.tail(5)\n",
    "\n",
    "\n",
    "# In[17]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "7-1. calculate the daily addition of confirmed cases\n",
    "\"\"\"\n",
    "data_confirmed[\"Daily Addition\"] = 0\n",
    "data_confirmed.head(3)\n",
    "\n",
    "\n",
    "for index in range(data_confirmed.shape[0]-1,-1,-1):\n",
    "        if index == 0:\n",
    "            data_confirmed.iloc[index,-1] = data_confirmed.iloc[index,-2]\n",
    "        else:\n",
    "            data_confirmed.iloc[index,-1] = data_confirmed.iloc[index,-2] - data_confirmed.iloc[index-1,-2]\n",
    "\n",
    "data_confirmed.head(3)\n",
    "\n",
    "\n",
    "# In[18]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "7-2. plot the daily addition and add an average line in the plot\n",
    "\"\"\"\n",
    "# import matplotlib.pyplot and alias as plt\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# find the mean of daily addition\n",
    "mean = data_confirmed[\"Daily Addition\"].mean()\n",
    "\n",
    "# set up the plot\n",
    "fig,ax= plt.subplots(figsize=(12,8))\n",
    "\n",
    "# plot the data\n",
    "data_confirmed[\"Daily Addition\"].plot()\n",
    "ax.axhline(mean) # axhline() -> to add a horizontal line across the axis\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# In[19]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "8. Data visualization - time series\n",
    "\"\"\"\n",
    "# delete the last row (State Total) to make a time series later\n",
    "data_confirmed.drop(data_confirmed.tail(1).index, inplace = True) # inplace = True -> revise the original object instead of creating a new object\n",
    "data_confirmed.tail(5)\n",
    "\n",
    "\n",
    "# In[20]:\n",
    "\n",
    "\n",
    "# prepare the list of df1's index(date) for the plot: df1_index\n",
    "data_confirmed_index = data_confirmed.index.tolist()\n",
    "\n",
    "# make df1's index same as to_datetime(df1_index)\n",
    "data_confirmed.index = pd.to_datetime(data_confirmed_index)# to_datetime() helps to convert string Date time into Python Date time object\n",
    "\n",
    "# set to_datetime(df1_index) as the index of the Data Frame(df1)\n",
    "data_confirmed.set_index(data_confirmed.index, inplace=True) # inplace=True -> the data is revised in place.\n",
    "\n",
    "# make a plot to show the number of confirmed cases of each state\n",
    "data_confirmed.plot(y = state_confirmed[:-1], use_index = True, title='Curve Graph', style='--').legend(loc='upper left',shadow=True) # state_confirmed[:-1] -> not select the last column(Summary_confirmed) of the state_confirmed list; use_index = True -> use index as ticks for x axis(use_index: default True actually); legend: an area describing the elements of the graph.\n",
    "plt.gcf().set_size_inches(25, 18) # set the figure size in inches (1in == 2.54cm)\n",
    "\n",
    "# equalize the scale of x-axis and y-axis\n",
    "plt.axis(aspect='equal')\n",
    "\n",
    "# name the label of x and y\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Cases #')\n",
    "\n",
    "# display the plot\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# In[21]:\n",
    "\n",
    "\n",
    "# use the subplots to display each state's status\n",
    "axes = data_confirmed.plot(kind='bar',figsize=(30,40), use_index = True, title='Bar Chart', subplots=True, layout=(12,5))\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# In[22]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "9. Simple linear regression for predictions: y = mx+c (y: ttl confirmed cases; x: state's confirmed cases) with inner function\n",
    "Note: higher coefficients indicate greater relevance of the predictor\n",
    "Note: x = Independent Variable; y = Dependent Variable\n",
    "\"\"\"\n",
    "\n",
    "def coefficient(state,ttl):\n",
    "    # collecting the training data of X and Y\n",
    "    X = data_confirmed[state].values \n",
    "    Y = data_confirmed[ttl].values\n",
    "\n",
    "    # mean X and Y\n",
    "    mean_x = np.mean(X)\n",
    "    mean_y = np.mean(Y)\n",
    " \n",
    "    # ttl number of values\n",
    "    n = len(X)\n",
    " \n",
    "    # Using the formula to calculate m and c\n",
    "    numer = 0\n",
    "    denom = 0\n",
    "    for i in range(n):\n",
    "        numer += (X[i] - mean_x) * (Y[i] - mean_y)\n",
    "        denom += pow((X[i] - mean_x),2)\n",
    "        m = numer / denom\n",
    "        c = mean_y - (m * mean_x)\n",
    "    \n",
    "    # Print coefficients\n",
    "    print(\"TTL confirmed num = c(%s) + m(%s) âˆ— %s num\" %(c, m, state))\n",
    "    \n",
    "    # inner function to make the plot of simple linear regression\n",
    "    def draw(X,Y,c,m):\n",
    "        plt.figure(figsize=(20,10)) \n",
    "\n",
    "        # plotting values and regression line\n",
    "        max_x = np.max(X) + 100\n",
    "        min_x = np.min(X) - 100\n",
    "        \n",
    "        # create the prediction space\n",
    "        x = np.linspace(min_x, max_x)\n",
    "        \n",
    "        # create a simple linear regression \n",
    "        y = c + m * x \n",
    " \n",
    "        # ploting line\n",
    "        plt.plot(x, y, color='g', label='regression line', lw = 4) # lw = linewidth\n",
    "        \n",
    "        # ploting scatter points\n",
    "        plt.scatter(X, Y, c='r', label='training data')\n",
    "        \n",
    "        \n",
    "        # make a plot\n",
    "        plt.xlabel('%s cases #' %state)\n",
    "        plt.ylabel('Total confirmed cases #')\n",
    "        plt.legend()\n",
    "        plt.show()\n",
    "    \n",
    "    # call the inner function\n",
    "    draw(X,Y,c,m)\n",
    "\n",
    "    \n",
    "\n",
    "\n",
    "# substitute the state's confirmed data into the function above to draw a SLR \n",
    "for i in list(data_confirmed.columns):\n",
    "    coefficient(i,\"Summary_confirmed\")\n",
    "\n",
    "\n",
    "# In[ ]:\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "Lastly, send this whole code to user's email\n",
    "\"\"\"\n",
    "# import the email modules\n",
    "from email.mime.multipart import MIMEMultipart\n",
    "from email.mime.text import MIMEText\n",
    "\n",
    "# create the object of MIMEMultipart\n",
    "content = MIMEMultipart()  \n",
    "\n",
    "# allow user to input the email (string type)\n",
    "email = str(input(\"Your email address: \"))\n",
    "\n",
    "# email title\n",
    "content[\"subject\"] = \"Happy Chinese New Year! Code is here!\"\n",
    "\n",
    "# sender\n",
    "content[\"from\"] = \"vicky.kuo.contact@gmail.com\"\n",
    "\n",
    "# receiver\n",
    "content[\"to\"] = email\n",
    "\n",
    "# write the email body\n",
    "content.attach(MIMEText(\"Happy Chinese New Year!! Please refer to the whole code here: https://codeshare.io/adqx0K\"))\n",
    "\n",
    "# import the SMTP module\n",
    "import smtplib\n",
    "\n",
    "# set SMTP server\n",
    "with smtplib.SMTP(host=\"smtp.gmail.com\", port=\"587\") as smtp:\n",
    "    try:\n",
    "        # verify the SMTP server\n",
    "        smtp.ehlo()\n",
    "        # encrypted transmission\n",
    "        smtp.starttls()\n",
    "        # login sender's email\n",
    "        smtp.login(\"medium.fob.contact@gmail.com\", \"ejxfsttvtjhuwvlm\")\n",
    "        # send the email\n",
    "        smtp.send_message(content)\n",
    "        print(\"Email sent.\")\n",
    "    except Exception as e:\n",
    "        print(\"Error message: \", e)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
